{"name":"Makesure","tagline":"JavaScript object validation made easy.","body":"# makesure\r\n\r\n[![NPM version][npm-image]][npm-url]\r\n[![build status][travis-image]][travis-url]\r\n\r\n```js\r\nvar makesure = require('makesure')\r\n\r\nvar empty = function(value) { return value.length > 0 }\r\n\r\nvar validateUser = makesure(function(){\r\n  this.permit('name email') // optional\r\n  this.attrs('name email').isNot(empty).orSay(\"can't be empty\")\r\n})\r\n\r\nvar userInput = { name: '', description: 'My description', admin: true }\r\n\r\n// Validates a object, with an intrusive attribute.\r\nvalidateUser(userInput, function(error, user){\r\n  // error == {\r\n  //   error: {\r\n  //     attrs: {\r\n  //       name: {\r\n  //         messages: [\"can't be empty\"]\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n  // user == {\r\n  //   name: '',\r\n  //   description: 'My description'\r\n  // }\r\n})\r\n```\r\n\r\n[Check out the documentation!](https://github.com/sadjow/makesure)\r\n\r\n##  Features\r\n\r\n  * DSL to define validations.\r\n  * Nested validations.\r\n  * Validation focused on attributes or general.\r\n  * Validate the entire object and return all the errors.\r\n  * You can use your own functions for validation. Or use a the set of functions like of the [validator](https://github.com/chriso/validator.js) package provides.\r\n\r\n##  Installation\r\n\r\n```console\r\nnpm install --save makesure\r\n```\r\n\r\n## Nested validation\r\n\r\nYou can use makesure validate nested function to validate a whole object and get all the errors at once.\r\n\r\n```js\r\nvar validator = require('validator'); // Only to ilustrate this example\r\nvar makesure = require('makesure');\r\nvar length = validator.isLength;\r\nvar empty = function(value){\r\n  return value.length == 0;\r\n};\r\nvar user = {\r\n  name: '',\r\n  address: {\r\n    street: ''\r\n  }\r\n}\r\nvar validateAddress = makesure(function(){\r\n  this.attr('street').isNot(empty).orSay(\"Can't be empty\")\r\n})\r\n\r\nvar validateUser = makesure(function(){\r\n  this.attr('name').is(length, 3, 200).orSay('Minimum length is 3 and max is 200')\r\n  this.attr('address').validateWith(validateAddress)\r\n})\r\n\r\nvalidateUser(user, function(error, user){\r\n  // Do the operation you want to...\r\n  // error == {\r\n  //   error: {\r\n  //     attrs: {\r\n  //       name: { messages: [\"Minimum length is 3 and max is 200\"] },\r\n  //       address: {\r\n  //         attrs: {\r\n  //           street: { messages: [\"Can't be empty\"] }\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n})\r\n```\r\n\r\n## General validation\r\n\r\nSometimes, it's needed to validate the time of the operation or if a configuration flag is enabled. That validation is general for that object/operation.\r\n\r\n```js\r\nvar validateAction = makesure(function(){\r\n  this.validate(function(){\r\n    return new Date().getDay() != 7;\r\n  }).orSay(\"The operation can't be performed on Sunday.\");\r\n})\r\n\r\nvalidateAction({}, function(error){\r\n// error == {\r\n//   error: {\r\n//     messages: [\"The operation can't be performed on Sunday.\"]\r\n//   }\r\n// }\r\n})\r\n```\r\n\r\n\r\n## License\r\n\r\nMIT\r\n\r\n[npm-image]: https://img.shields.io/npm/v/makesure.svg?style=flat-square\r\n[npm-url]: https://npmjs.org/package/makesure\r\n[travis-image]: https://img.shields.io/travis/sadjow/makesure/master.svg?style=flat-square\r\n[travis-url]: https://travis-ci.org/sadjow/makesure\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}